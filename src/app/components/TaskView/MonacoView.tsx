'use client';

import React, { useEffect, useState, useRef, useCallback } from 'react';
import Image from 'next/image';
import BfLogo from './assets/bf-logo.svg';
import { InfoPopover, InfoPopoverIcon } from '../shared/InfoPopover';
import LoadingComponent from './LoadingComponent';
import Confetti from 'react-confetti';
import { cn } from '~/helpers';
import { Modal } from '../shared/Modal';
import { TaskReportForm } from './TaskReportForm';
import { useParams } from 'next/navigation';
import { createPortal } from 'react-dom';
import { FloatingActionBar } from './FloatingActionBar';
import { useMonacoEditorStore } from '~/store/monacoEditorStore';
import { api } from '~/trpc/react';

export const StarIcon = ({ className }: { className?: string }) => {
  return (
    <svg
      width="32"
      height="32"
      viewBox="0 0 32 32"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={cn('h-8 w-8', className)}
    >
      <path
        d="M14.7578 4.30371C15.5398 3.93285 16.4475 3.93284 17.2295 4.30371C17.7664 4.55844 18.1501 5.0427 18.4951 5.59961C18.8419 6.15942 19.2229 6.9214 19.6992 7.87402L19.7178 7.90918L20.1006 8.67578C20.4252 9.32508 20.5239 9.50441 20.6494 9.63574C20.7768 9.76899 20.9296 9.87581 21.0986 9.94922C21.2652 10.0214 21.4675 10.0517 22.1885 10.1318L22.5361 10.1709L22.5762 10.1748C23.7202 10.3019 24.6308 10.4029 25.3193 10.543C25.999 10.6812 26.6213 10.8842 27.0547 11.3262C27.6798 11.9639 27.974 12.8557 27.8516 13.7402C27.7666 14.3535 27.3877 14.8875 26.9238 15.4033C26.4539 15.9258 25.7821 16.5487 24.9385 17.332L24.9092 17.3594L24.542 17.7002C23.9072 18.2897 23.7353 18.4643 23.6387 18.6523C23.5405 18.8435 23.4886 19.0556 23.4863 19.2705C23.4842 19.4816 23.556 19.7204 23.8467 20.5488L23.8594 20.5859C24.2912 21.8166 24.6328 22.788 24.8262 23.543C25.0143 24.2777 25.1152 24.9863 24.876 25.5957C24.5363 26.4608 23.8004 27.1089 22.8994 27.3369C22.2666 27.497 21.5824 27.3117 20.8838 27.0361C20.1676 26.7536 19.2597 26.2998 18.1113 25.7256L18.0762 25.708L17.1846 25.2617C16.5866 24.9627 16.415 24.8847 16.249 24.8535C16.0804 24.8219 15.9069 24.8219 15.7383 24.8535C15.5723 24.8847 15.4009 24.9626 14.8027 25.2617L13.9111 25.708L13.875 25.7256C12.7267 26.2998 11.8186 26.7537 11.1025 27.0361C10.4039 27.3117 9.71977 27.4971 9.08691 27.3369C8.18618 27.1088 7.45094 26.4606 7.11133 25.5957C6.87209 24.9863 6.97299 24.2777 7.16113 23.543C7.35448 22.788 7.69516 21.8165 8.12695 20.5859L8.14062 20.5488C8.43126 19.7205 8.50309 19.4816 8.50098 19.2705C8.49872 19.0556 8.44681 18.8435 8.34863 18.6523C8.252 18.4642 8.07941 18.2899 7.44434 17.7002L7.07715 17.3594L7.04785 17.332C6.2045 16.5489 5.53329 15.9257 5.06348 15.4033C4.59965 14.8875 4.22069 14.3535 4.13574 13.7402C4.01328 12.8557 4.30753 11.9639 4.93262 11.3262C5.36587 10.8844 5.98757 10.6812 6.66699 10.543C7.35564 10.4029 8.26677 10.3019 9.41113 10.1748L9.4502 10.1709L9.79883 10.1318C10.5199 10.0517 10.7221 10.0215 10.8887 9.94922C11.0578 9.87579 11.2105 9.76906 11.3379 9.63574C11.4634 9.50442 11.5621 9.32507 11.8867 8.67578L12.2695 7.90918L12.2871 7.87402C12.7634 6.92135 13.1444 6.15946 13.4912 5.59961C13.8363 5.04256 14.2207 4.55844 14.7578 4.30371ZM16.5859 5.65918C16.2108 5.48141 15.7754 5.4813 15.4004 5.65918C15.2726 5.71986 15.0789 5.88551 14.7666 6.38965C14.4602 6.88431 14.1092 7.58426 13.6113 8.58008L13.2285 9.34668C13.2137 9.37628 13.199 9.40572 13.1846 9.43457C12.9245 9.95559 12.7244 10.3562 12.4229 10.6719C12.1574 10.9497 11.8388 11.1721 11.4863 11.3252C11.0858 11.4991 10.6405 11.5484 10.0615 11.6123C10.0295 11.6158 9.99676 11.6194 9.96387 11.623L9.61621 11.6611C8.42381 11.7936 7.58103 11.8888 6.9668 12.0137C6.33576 12.142 6.1028 12.2761 6.00391 12.377C5.704 12.6829 5.5623 13.1108 5.62109 13.5352C5.64064 13.6752 5.7487 13.9212 6.17871 14.3994C6.59779 14.8654 7.21856 15.4435 8.09766 16.2598L8.46484 16.6016C8.49407 16.6287 8.52326 16.6552 8.55176 16.6816C9.05969 17.1526 9.44975 17.5143 9.68262 17.9678C9.88708 18.366 9.99621 18.8063 10.001 19.2539C10.0063 19.7637 9.82827 20.2705 9.5957 20.9316C9.58253 20.9691 9.56916 21.0074 9.55566 21.0459C9.10808 22.3215 8.78943 23.2311 8.61426 23.915C8.43196 24.627 8.45637 24.9193 8.50684 25.0479C8.66977 25.4627 9.02301 25.7733 9.45508 25.8828C9.59065 25.9171 9.88083 25.9056 10.5527 25.6406C11.1998 25.3854 12.0487 24.962 13.2402 24.3662L14.1318 23.9199C14.1589 23.9064 14.1856 23.8931 14.2119 23.8799C14.6928 23.6391 15.0629 23.4538 15.4619 23.3789C15.8133 23.313 16.174 23.313 16.5254 23.3789C16.9242 23.4538 17.2937 23.6392 17.7744 23.8799C17.8009 23.8932 17.8283 23.9063 17.8555 23.9199L18.7471 24.3662C19.9388 24.9621 20.7875 25.3854 21.4346 25.6406C22.1059 25.9054 22.3955 25.917 22.5312 25.8828C22.9634 25.7734 23.3165 25.4627 23.4795 25.0479C23.53 24.9193 23.5553 24.627 23.373 23.915C23.1979 23.2311 22.8792 22.3215 22.4316 21.0459C22.4182 21.0075 22.4048 20.9691 22.3916 20.9316C22.159 20.2705 21.981 19.7636 21.9863 19.2539C21.9911 18.8062 22.1002 18.366 22.3047 17.9678C22.5375 17.5144 22.9267 17.1525 23.4346 16.6816C23.463 16.6552 23.4923 16.6287 23.5215 16.6016L23.8887 16.2598C24.768 15.4433 25.3895 14.8655 25.8086 14.3994C26.2385 13.9213 26.3467 13.6751 26.3662 13.5352C26.425 13.1108 26.2832 12.6829 25.9834 12.377C25.8845 12.2761 25.6515 12.142 25.0205 12.0137C24.4063 11.8887 23.5635 11.7936 22.3711 11.6611L22.0225 11.623C21.9898 11.6194 21.9576 11.6158 21.9258 11.6123C21.3469 11.5484 20.9015 11.4991 20.501 11.3252C20.1484 11.1721 19.83 10.9498 19.5645 10.6719C19.2628 10.3561 19.0629 9.95568 18.8027 9.43457C18.7883 9.40567 18.7736 9.37632 18.7588 9.34668L18.376 8.58008C17.8781 7.58428 17.5271 6.88432 17.2207 6.38965C16.9082 5.88524 16.7137 5.71978 16.5859 5.65918Z"
        fill="#FEF360"
        fillOpacity="0.5"
      />
    </svg>
  );
};

export const StarIconFilled = ({ className }: { className?: string }) => {
  return (
    <svg
      width="32"
      height="32"
      viewBox="0 0 32 32"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={cn('h-8 w-8', className)}
    >
      <path
        d="M14.7587 4.30153C15.5406 3.9307 16.4475 3.93078 17.2294 4.30153C17.7664 4.55619 18.1511 5.03959 18.4961 5.59645C18.8429 6.15633 19.2238 6.91904 19.7002 7.87184L19.7177 7.907L20.1015 8.6736C20.4256 9.32182 20.5241 9.50132 20.6494 9.63258C20.7768 9.76592 20.9304 9.87262 21.0996 9.94606C21.2661 10.0183 21.4683 10.0495 22.1894 10.1297L22.5371 10.1677L22.5771 10.1726C23.7212 10.2997 24.6317 10.4007 25.3203 10.5408C26 10.679 26.6223 10.8819 27.0556 11.324C27.6807 11.9618 27.975 12.8535 27.8525 13.7381C27.7675 14.3512 27.3885 14.8845 26.9248 15.4002C26.4548 15.9227 25.7832 16.5464 24.9394 17.3298L24.9101 17.3562L24.5429 17.698C23.908 18.2876 23.7362 18.4621 23.6396 18.6502C23.5415 18.8413 23.4885 19.0525 23.4863 19.2673C23.4841 19.4786 23.5567 19.7177 23.8476 20.5466L23.8603 20.5838C24.2921 21.8144 24.6338 22.7858 24.8271 23.5408C25.0152 24.2754 25.1161 24.9842 24.8769 25.5935C24.5372 26.4584 23.8011 27.1067 22.9003 27.3347C22.2675 27.4948 21.5834 27.3085 20.8847 27.033C20.1686 26.7505 19.2606 26.2966 18.1123 25.7224L18.0771 25.7048L17.1855 25.2595C16.5869 24.9602 16.4151 24.8815 16.249 24.8504C16.0806 24.8188 15.9076 24.8188 15.7392 24.8504C15.5731 24.8815 15.4021 24.9603 14.8037 25.2595L13.9111 25.7048L13.8759 25.7224C12.7275 26.2967 11.8196 26.7505 11.1035 27.033C10.4047 27.3086 9.72078 27.4949 9.08785 27.3347C8.18705 27.1067 7.45095 26.4584 7.11128 25.5935C6.87206 24.9842 6.97394 24.2755 7.16207 23.5408C7.35538 22.7859 7.6961 21.8143 8.12789 20.5838L8.14058 20.5466C8.43146 19.7177 8.50413 19.4786 8.50191 19.2673C8.49965 19.0526 8.44762 18.8412 8.34957 18.6502C8.25295 18.462 8.08038 18.2878 7.44527 17.698L7.07808 17.3562L7.04878 17.3298C6.20518 16.5465 5.53429 15.9226 5.06441 15.4002C4.60065 14.8845 4.22171 14.3512 4.13668 13.7381C4.01413 12.8534 4.30841 11.9618 4.93355 11.324C5.36682 10.882 5.9884 10.679 6.66793 10.5408C7.35657 10.4007 8.26771 10.2998 9.41207 10.1726L9.45113 10.1677L9.79878 10.1297C10.5203 10.0495 10.723 10.0184 10.8896 9.94606C11.0587 9.87262 11.2115 9.76586 11.3388 9.63258C11.4642 9.50129 11.5633 9.32234 11.8877 8.6736L12.2705 7.907L12.288 7.87184C12.7644 6.91902 13.1453 6.15634 13.4921 5.59645C13.8372 5.03953 14.2218 4.55622 14.7587 4.30153Z"
        fill="#FEF360"
      />
    </svg>
  );
};


export default function MonacoView({
  setAiMentorLastFailure,
  isCollapsed,
  taskId,
  taskData,
  setTaskStatus,
}: {
  setAiMentorLastFailure: (lastFailure: string) => void;
  isCollapsed: boolean;
  taskId: string;
  taskData: any;
  setTaskStatus: (status: string) => void;
}) {
  const iframeRef = useRef<HTMLIFrameElement>(null);

  const { 
    editorReady, 
    setEditorReady, 
    setIframeLoaded,
    iframeKey,
    showActionBar,
    setShowActionBar
  } = useMonacoEditorStore();

  // Function to handle iframe load event
  const handleIframeLoad = () => {
    setIframeLoaded(true);
    // Note: This only indicates the iframe has loaded, not that the Monaco editor is ready
  };

  // Set up message listener for communication with iframe
  useEffect(() => {
    const handleMessage = (event: MessageEvent) => {
      // Make sure the message is from our iframe
      if (
        iframeRef.current &&
        event.source === iframeRef.current.contentWindow
      ) {
        // Handle messages from iframe
        if (event.data.type === 'monaco-editor-ready') {
          console.log('Monaco editor is ready in iframe');
          setShowActionBar(true);
          setEditorReady(true);
        } else if (event.data.type === 'monaco-editor-error') {
          console.error('Error in Monaco editor:', event.data.error);
          // Show error state or try to reload
        } else if (event.data.type === 'iframe-loaded') {
          console.log(
            'Iframe loaded, waiting for Monaco editor to initialize...'
          );
          // The iframe is loaded but Monaco editor might not be ready yet
        }
        // Add more message handlers as needed
      }
    };

    window.addEventListener('message', handleMessage);
    return () => {
      window.removeEventListener('message', handleMessage);
    };
  }, []);


  // useEffect(() => {
  //   createPortal(
  //     <button
  //       onClick={() => setShowActionBar(!showActionBar)}
  //       className="absolute top-0 right-0 z-1000 h-10 w-10 bg-red-500"
  //     >
  //       {showActionBar ? 'hide' : 'show'}
  //     </button>,
  //     document.body
  //   );
  // }, []);

  const { data: lastTaskData } = api.tasks.getById.useQuery(
    { taskId },
    {
      enabled: !!taskId,
      staleTime: 1000 * 60 * 5, // 5 minutes
      initialData: taskData,
    }
  );

  return (
    <div className={cn('h-full w-272', isCollapsed && 'w-396')}>
      {/* Editor container with iframe */}
      <div id="editorsDiv" className="relative h-full w-full">
        <iframe
          id="monaco-editor-iframe"
          ref={iframeRef}
          key={iframeKey}
          src={`/monaco-iframe/${taskId}`}
          className={cn('h-full w-full border-0', !editorReady && 'opacity-0')}
          onLoad={handleIframeLoad}
          title="Monaco Editor"
        />
        {!editorReady && <LoadingComponent />}
      </div>

      {showActionBar && (
        <FloatingActionBar
          setAiMentorLastFailure={setAiMentorLastFailure}
          iframeRef={iframeRef}
          taskData={lastTaskData || taskData}
          setTaskStatus={setTaskStatus}
        />
      )}
    </div>
  );
}
