diff --git a/dist/cookies/index.mjs b/dist/cookies/index.mjs
index 5ae04e6273adbddaeda4a06e48eac3c45bf57b8c..5358ae4d9dbacc6bda17e3157e0a22b2d4020969 100644
--- a/dist/cookies/index.mjs
+++ b/dist/cookies/index.mjs
@@ -187,8 +187,18 @@ function setCookieToHeader(headers) {
 }
 
 function createCookieGetter(options) {
+  console.log('createCookieGetter', options);
+  console.log('options.advanced?.useSecureCookies', options.advanced?.useSecureCookies);
+  console.log('options.baseURL', options.baseURL);
+  console.log('options.baseURL.startsWith("https://")', options.baseURL.startsWith("https://"));
+  console.log('isProduction', isProduction);
+
   const secure = options.advanced?.useSecureCookies !== void 0 ? options.advanced?.useSecureCookies : options.baseURL !== void 0 ? options.baseURL.startsWith("https://") ? true : false : isProduction;
   const secureCookiePrefix = secure ? "__Secure-" : "";
+
+  console.log('secure', secure);
+  console.log('secureCookiePrefix', secureCookiePrefix);
+
   const crossSubdomainEnabled = !!options.advanced?.crossSubDomainCookies?.enabled;
   const domain = crossSubdomainEnabled ? options.advanced?.crossSubDomainCookies?.domain || (options.baseURL ? new URL(options.baseURL).hostname : void 0) : void 0;
   if (crossSubdomainEnabled && !domain) {
diff --git a/dist/shared/better-auth.D6-2nUlx.mjs b/dist/shared/better-auth.D6-2nUlx.mjs
index bf8f83b5e75e1a8d39a79c77d9bd8be1d8215b08..2f2015754b99e7e71b09ebf88faa022504e56c6c 100644
--- a/dist/shared/better-auth.D6-2nUlx.mjs
+++ b/dist/shared/better-auth.D6-2nUlx.mjs
@@ -341,14 +341,20 @@ const getSession = () => createAuthEndpoint(
         ctx.context.authCookies.sessionToken.name,
         ctx.context.secret
       );
+      console.log('sessionCookieToken', sessionCookieToken);
+      console.log('[sessionCookieToken]', ctx.context.authCookies.sessionToken.name, ctx.context.secret);
       if (!sessionCookieToken) {
+        console.log('no sessionCookieToken');
         return null;
       }
       const sessionDataCookie = ctx.getCookie(
         ctx.context.authCookies.sessionData.name
       );
+      console.log('sessionDataCookie', sessionDataCookie);
       const sessionDataPayload = sessionDataCookie ? safeJSONParse(binary.decode(base64.decode(sessionDataCookie))) : null;
+      console.log('sessionDataPayload', sessionDataPayload);
       if (sessionDataPayload) {
+        console.log('sessionDataPayload');
         const isValid = await createHMAC("SHA-256", "base64urlnopad").verify(
           ctx.context.secret,
           JSON.stringify({
@@ -357,7 +363,9 @@ const getSession = () => createAuthEndpoint(
           }),
           sessionDataPayload.signature
         );
+        console.log('isValid', isValid);
         if (!isValid) {
+          console.log('no isValid');
           const dataCookie = ctx.context.authCookies.sessionData.name;
           ctx.setCookie(dataCookie, "", {
             maxAge: 0
@@ -365,10 +373,12 @@ const getSession = () => createAuthEndpoint(
           return ctx.json(null);
         }
       }
+      console.log('sessionDataPayload?.session', sessionDataPayload?.session);
       const dontRememberMe = await ctx.getSignedCookie(
         ctx.context.authCookies.dontRememberToken.name,
         ctx.context.secret
       );
+      console.log('dontRememberMe', dontRememberMe);
       if (sessionDataPayload?.session && ctx.context.options.session?.cookieCache?.enabled && !ctx.query?.disableCookieCache) {
         const session2 = sessionDataPayload.session;
         const hasExpired = sessionDataPayload.expiresAt < Date.now() || session2.session.expiresAt < /* @__PURE__ */ new Date();
@@ -383,8 +393,10 @@ const getSession = () => createAuthEndpoint(
           });
         }
       }
+      console.log('sessionCookieToken', sessionCookieToken);
       const session = await ctx.context.internalAdapter.findSession(sessionCookieToken);
       ctx.context.session = session;
+      console.log('session', session);
       if (!session || session.session.expiresAt < /* @__PURE__ */ new Date()) {
         deleteSessionCookie(ctx);
         if (session) {
@@ -392,9 +404,11 @@ const getSession = () => createAuthEndpoint(
             session.session.token
           );
         }
+        console.log('no session');
         return ctx.json(null);
       }
       if (dontRememberMe || ctx.query?.disableRefresh) {
+        console.log('dontRememberMe || ctx.query?.disableRefresh');
         return ctx.json(
           session
         );
